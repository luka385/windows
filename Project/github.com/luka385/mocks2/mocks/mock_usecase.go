// Code generated by MockGen. DO NOT EDIT.
// Source: application/ports/ports.go

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "Project/github.com/luka385/mocks2/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepositoryPort is a mock of RepositoryPort interface.
type MockRepositoryPort struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryPortMockRecorder
}

// MockRepositoryPortMockRecorder is the mock recorder for MockRepositoryPort.
type MockRepositoryPortMockRecorder struct {
	mock *MockRepositoryPort
}

// NewMockRepositoryPort creates a new mock instance.
func NewMockRepositoryPort(ctrl *gomock.Controller) *MockRepositoryPort {
	mock := &MockRepositoryPort{ctrl: ctrl}
	mock.recorder = &MockRepositoryPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryPort) EXPECT() *MockRepositoryPortMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockRepositoryPort) CreateUser(arg0 *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepositoryPortMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepositoryPort)(nil).CreateUser), arg0)
}

// DeleteUser mocks base method.
func (m *MockRepositoryPort) DeleteUser(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockRepositoryPortMockRecorder) DeleteUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockRepositoryPort)(nil).DeleteUser), arg0)
}

// GetUserById mocks base method.
func (m *MockRepositoryPort) GetUserById(arg0 string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", arg0)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockRepositoryPortMockRecorder) GetUserById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockRepositoryPort)(nil).GetUserById), arg0)
}

// GetUsers mocks base method.
func (m *MockRepositoryPort) GetUsers() ([]*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers")
	ret0, _ := ret[0].([]*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockRepositoryPortMockRecorder) GetUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockRepositoryPort)(nil).GetUsers))
}

// UpdateUser mocks base method.
func (m *MockRepositoryPort) UpdateUser(arg0 string, arg1 *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockRepositoryPortMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockRepositoryPort)(nil).UpdateUser), arg0, arg1)
}
