// Code generated by MockGen. DO NOT EDIT.
// Source: application/ports/ports.go
//
// Generated by this command:
//
//	mockgen -source=application/ports/ports.go -destination=mock/mocks_user_repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "primer-api/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUseCasePort is a mock of UseCasePort interface.
type MockUseCasePort struct {
	ctrl     *gomock.Controller
	recorder *MockUseCasePortMockRecorder
	isgomock struct{}
}

// MockUseCasePortMockRecorder is the mock recorder for MockUseCasePort.
type MockUseCasePortMockRecorder struct {
	mock *MockUseCasePort
}

// NewMockUseCasePort creates a new mock instance.
func NewMockUseCasePort(ctrl *gomock.Controller) *MockUseCasePort {
	mock := &MockUseCasePort{ctrl: ctrl}
	mock.recorder = &MockUseCasePortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCasePort) EXPECT() *MockUseCasePortMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUseCasePort) CreateUser(arg0 *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUseCasePortMockRecorder) CreateUser(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUseCasePort)(nil).CreateUser), arg0)
}

// GetUserByID mocks base method.
func (m *MockUseCasePort) GetUserByID(arg0 string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", arg0)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUseCasePortMockRecorder) GetUserByID(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUseCasePort)(nil).GetUserByID), arg0)
}

// MockRepositoryPort is a mock of RepositoryPort interface.
type MockRepositoryPort struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryPortMockRecorder
	isgomock struct{}
}

// MockRepositoryPortMockRecorder is the mock recorder for MockRepositoryPort.
type MockRepositoryPortMockRecorder struct {
	mock *MockRepositoryPort
}

// NewMockRepositoryPort creates a new mock instance.
func NewMockRepositoryPort(ctrl *gomock.Controller) *MockRepositoryPort {
	mock := &MockRepositoryPort{ctrl: ctrl}
	mock.recorder = &MockRepositoryPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryPort) EXPECT() *MockRepositoryPortMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockRepositoryPort) CreateUser(arg0 *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepositoryPortMockRecorder) CreateUser(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepositoryPort)(nil).CreateUser), arg0)
}

// GetUserByID mocks base method.
func (m *MockRepositoryPort) GetUserByID(arg0 string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", arg0)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockRepositoryPortMockRecorder) GetUserByID(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockRepositoryPort)(nil).GetUserByID), arg0)
}
